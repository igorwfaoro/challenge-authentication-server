<html>

<head>
    <?- include('../common/head', { title: 'Jade Dragon Auth' }) ?>

    <link rel="stylesheet"
          href="/css/view-index.css">
</head>

<body>

    <div id="viewIndex">

        <div class="bg">

            <div class="content"
                 v-if="loggedUser">

                <h1>Welcome {{ loggedUser.name }}!</h1>

                <div class="user-data">
                    <div class="name">{{ loggedUser.name }}</div>
                    <div class="email">{{ loggedUser.email }}</div>
                    <div class="created-at">Created {{ loggedUser.createdAtFormatted }}</div>
                </div>

                <div class="logout">
                    <button class="btn btn-light"
                            v-on:click="logout">Logout</button>
                </div>
            </div>

        </div>

    </div>

    <?- include('../common/scripts')?>

    <script type="module">

        import { createAppStorage } from '/js/components/storage.js';
        import { createLoader } from '/js/components/loader.js';
        import { createToast } from '/js/components/toast.js';
        import { createHttpClient } from '/js/components/http-client.js';
        import { createRouter } from '/js/components/router.js';

        const AppStorage = createAppStorage();
        const Loader = createLoader(document);
        const Toast = createToast(document);
        const HttpClient = createHttpClient();
        const Router = createRouter();

        const viewIndex = new Vue({
            el: '#viewIndex',

            data: {
                loggedUser: null
            },

            created() {
                if (!AppStorage.getData()?.token) {
                    Router.navigate('/login');
                    return;
                }

                Loader.open();
                HttpClient.post('/api/auth/refresh').then(response => {
                    Loader.dismiss();
                    this.getLoggedUser();
                }).catch(error => {
                    Loader.dismiss();
                    Toast.showHttpError(error);
                    setTimeout(() => this.logout(), 2000);
                });
            },

            methods: {
                logout() {
                    AppStorage.clearData();
                    Router.navigate('/login');
                },

                getLoggedUser() {

                    Loader.open();
                    HttpClient.get('/api/users/logged').then(response => {
                        Loader.dismiss();
                        this.loggedUser = {
                            ...response.data,
                            createdAtFormatted: moment.utc(response.data.createdAt).local().calendar().toLowerCase()
                        };
                    }).catch(error => {
                        Loader.dismiss();
                        Toast.showHttpError(error);
                    });
                },
            }
        });
    </script>
</body>

</html>